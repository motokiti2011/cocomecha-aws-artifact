AWSTemplateFormatVersion: 2010-09-09
Description: IaC for API Gateway
Parameters:
  # browsingHistoryLambdaのARN
  BrowsingHistoryLambdaArn:
    Type: String

  # completionSlipLambdaのARN
  CompletionSlipLambdaArn:
    Type: String

  # evaluationInfoLambdaのARN
  EvaluationInfoLambdaArn:
    Type: String

  # historyInfoMechaLambdaのARN
  HistoryInfoMechaLambdaArn:
    Type: String

  # HistoryInfoOfficeLambdaのARN
  HistoryInfoOfficeLambdaArn:
    Type: String
    Description: Product of Lambda

  # mechanicInfoLambdaのARN
  MechanicInfoLambdaArn:
    Type: String

  # officeInfoLambdaのARN
  OfficeInfoLambdaArn:
    Type: String

  # slipDetailInfoLambdaのARN
  SlipDetailInfoLambdaArn:
    Type: String
    Description: Product of Lambda

  # slipMegPrmUserLambdaのARN
  SlipMegPrmUserLambdaArn:
    Type: String

  # slipMessageInfoLambdaのARN
  SlipMessageInfoLambdaArn:
    Type: String

  # slipQuestionLambdaのARN
  SlipQuestionLambdaArn:
    Type: String
    Description: Product of Lambda

  # slipVehicleLambdaのARN
  SlipVehicleLambdaArn:
    Type: String

  # transactionSlipLambdaのARN
  TransactionSlipLambdaArn:
    Type: String

  # userFavoriteLambdaのARN
  UserFavoriteLambdaArn:
    Type: String

  # userInfoLambdaのARN
  UserInfoLambdaArn:
    Type: String

  # userMyListLambdaのARN
  UserMyListLambdaArn:
    Type: String

  # userVehicleInfoLambdaのARN
  UserVehicleInfoLambdaArn:
    Type: String

  # CognitoUserPoolのARN
  UserPoolArn:
    Type: String
    Description: UserPool of Cognito

Resources:
  # RESTAPI
  ApiGwRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: This is the Description of ApiGwRestAPI
      Name: 'cocomecha-APIGW'
      EndpointConfiguration:
        Types:
          - REGIONAL
  ApiGwDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: This is the Description of ApiGwDeployment
      RestApiId: !Ref ApiGwRestAPI
    DependsOn:
      - V1Resource
      - SerchResource
      - IndexSerchResource
      - BrowsinghistoryResource
      - CompletionSlipResource
      - EvaluationInfoResource
      - HistoryInfoMechaResource
      - HistoryInfoOfficeResource
      - MechanicInfoResource
      - OfficeInfoResource
      - SlipDetailInfoResource
      - SlipMegPrmUserResource
      - SlipMessageInfoResource
      - SlipQuestionResource
      - SlipVehicleResource
      - TransactionSlipResource
      - UserFavoriteResource
      - UserInfoResource
      - UserMyListResource
      - UserVehicleInfoResource
      - BrowsinghistoryMethod
      - CompletionSlipMethod
      - EvaluationInfoMethod
      - HistoryInfoMechaMethod
      - HistoryInfoOfficeMethod
      - MechanicInfoMethod
      - OfficeInfoMethod
      - SlipDetailInfoMethod
      - SlipMegPrmUserMethod
      - SlipMessageInfoMethod
      - SlipQuestionMethod
      - SlipVehicleMethod
      - TransactionSlipMethod
      - UserFavoriteMethod
      - UserInfoMethod
      - UserMyListMethod
      - UserVehicleInfoMethod
  # ステージ
  ApiGwStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref ApiGwRestAPI
      DeploymentId: !Ref ApiGwDeployment
      StageName: dev
  # オーソライザー
  Authorizer: 
    Type: AWS::ApiGateway::Authorizer
    Properties: 
      ProviderARNs: 
        - !Ref UserPoolArn
      AuthorizerResultTtlInSeconds: "300"
      Type: "COGNITO_USER_POOLS"
      IdentitySource: "method.request.header.Authorization"
      Name: "Authorization"
      RestApiId: !Ref ApiGwRestAPI

  # v1リソース
  V1Resource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiGwRestAPI
        - RootResourceId
      PathPart: v1
      RestApiId: !Ref ApiGwRestAPI

  # Serchリソース
  SerchResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref V1Resource
      PathPart: serch
      RestApiId: !Ref ApiGwRestAPI

  # Browsinghistoryリソース
  BrowsinghistoryResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: browsinghistory
      RestApiId: !Ref ApiGwRestAPI
  # Browsinghistoryメソッド
  BrowsinghistoryMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref BrowsinghistoryResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref BrowsingHistoryLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission1

  # CompletionSlipリソース
  CompletionSlipResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: completionslip
      RestApiId: !Ref ApiGwRestAPI
  # CompletionSlipメソッド
  CompletionSlipMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref CompletionSlipResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref CompletionSlipLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission16


  # Evaluationinfoリソース
  EvaluationInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: evaluationinfo
      RestApiId: !Ref ApiGwRestAPI
  # Evaluationinfoメソッド
  EvaluationInfoMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref EvaluationInfoResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref EvaluationInfoLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission2


  # HistoryInfoMechaリソース
  HistoryInfoMechaResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: historyinfomecha
      RestApiId: !Ref ApiGwRestAPI
  # HistoryInfoMechaメソッド
  HistoryInfoMechaMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref HistoryInfoMechaResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref HistoryInfoMechaLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission3


  # HistoryInfoOfficeリソース
  HistoryInfoOfficeResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: historyinfooffice
      RestApiId: !Ref ApiGwRestAPI
  # HistoryInfoOfficeメソッド
  HistoryInfoOfficeMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref HistoryInfoOfficeResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref HistoryInfoOfficeLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission4


  # MechanicInfoリソース
  MechanicInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: mechanicinfo
      RestApiId: !Ref ApiGwRestAPI
  # MechanicInfoメソッド
  MechanicInfoMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref MechanicInfoResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref MechanicInfoLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission5


  # OfficeInfoリソース
  OfficeInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: officeinfo
      RestApiId: !Ref ApiGwRestAPI
  # OfficeInfoメソッド
  OfficeInfoMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref OfficeInfoResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref OfficeInfoLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission6


  # SlipDetailInfoリソース
  SlipDetailInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: slipdetailinfo
      RestApiId: !Ref ApiGwRestAPI
  # SlipDetailInfoメソッド
  SlipDetailInfoMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref SlipDetailInfoResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref SlipDetailInfoLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission7


  # SlipMegPrmUserリソース
  SlipMegPrmUserResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: slipmegprmuser
      RestApiId: !Ref ApiGwRestAPI
  # SlipMegPrmUserメソッド
  SlipMegPrmUserMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref SlipMegPrmUserResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref SlipMegPrmUserLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission8


  # SlipMessageInfoリソース
  SlipMessageInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: slipmessageinfo
      RestApiId: !Ref ApiGwRestAPI
  # SlipMessageInfoメソッド
  SlipMessageInfoMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref SlipMessageInfoResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref SlipMessageInfoLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission9


  # SlipQuestionリソース
  SlipQuestionResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: slipquestion
      RestApiId: !Ref ApiGwRestAPI
  # SlipQuestionメソッド
  SlipQuestionMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref SlipQuestionResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref SlipQuestionLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission10


  # SlipVehicleリソース
  SlipVehicleResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: slipvehicle
      RestApiId: !Ref ApiGwRestAPI
  # SlipVehicleメソッド
  SlipVehicleMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref SlipVehicleResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref SlipVehicleLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission11


  # TransactionSlipリソース
  TransactionSlipResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: transactionslip
      RestApiId: !Ref ApiGwRestAPI
  # TransactionSlipメソッド
  TransactionSlipMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref TransactionSlipResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref TransactionSlipLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission17

  # UserFavoriteリソース
  UserFavoriteResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: userfavorite
      RestApiId: !Ref ApiGwRestAPI
  # UserFavoriteメソッド
  UserFavoriteMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref UserFavoriteResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref UserFavoriteLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission12


  # UserInfoリソース
  UserInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: userinfo
      RestApiId: !Ref ApiGwRestAPI
  # UserInfoメソッド
  UserInfoMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref UserInfoResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref UserInfoLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission13


  # UserMyListリソース
  UserMyListResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: usermylist
      RestApiId: !Ref ApiGwRestAPI
  # UserMyListメソッド
  UserMyListMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref UserMyListResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref UserMyListLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission14


  # UserVehicleInfoリソース
  UserVehicleInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref SerchResource
      PathPart: uservehicleinfo
      RestApiId: !Ref ApiGwRestAPI
  # UserVehicleInfoメソッド
  UserVehicleInfoMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref UserVehicleInfoResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref UserVehicleInfoLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission14



  # IndexSerchリソース
  IndexSerchResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref V1Resource
      PathPart: indexserch
      RestApiId: !Ref ApiGwRestAPI


  # LambdaPermission
  LambdaPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: browsingHistoryLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: evaluationInfoLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: historyInfoMechaLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission4:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: historyInfoOfficeLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission5:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: mechanicInfoLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission6:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: officeInfoLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com


  LambdaPermission7:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: slipDetailInfoLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission8:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: slipMegPrmUserLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission9:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: slipMessageInfoLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission10:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: slipQuestionLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission11:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: slipVehicleLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission12:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: userFavoriteLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com


  LambdaPermission13:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: userInfoLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission14:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: userMyListLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission15:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: userVehicleInfoLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission16:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: completionSlipLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission17:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: transactionSlipLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
