AWSTemplateFormatVersion: 2010-09-09
Description: IaC for API Gateway
Parameters:
  # slipMegPrmUserCheckLambdaのARN
  SlipMegPrmUserCheckLambdaArn:
    Type: String

  # slipAdminUserCheckLambdaのARN
  SlipAdminUserCheckLambdaArn:
    Type: String

  # checkAcceseAdminLambdaArnのARN
  CheckAcceseAdminLambdaArn:
    Type: String

  # serviceTransactionReqUserCheckLambdaのARN
  ServiceTransactionReqUserCheckLambdaArn:
    Type: String

  # serviceTransactionUserCheckLambdaのARN
  ServiceTransactionUserCheckLambdaArn:
    Type: String

  # CheckAcceseUserSentTransactionReqLambdaのARN
  CheckAcceseUserSentTransactionReqLambdaArn:
    Type: String

  # CheckAcceseUserSlipLambdaのARN
  CheckAcceseUserSlipLambdaArn:
    Type: String


  # CognitoUserPoolのARN
  UserPoolArn:
    Type: String
    Description: UserPool of Cognito

Resources:
  # RESTAPI
  ApiGwRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: This is the Description of ApiGwRestAPI
      Name: 'hakomecha-API-CHECK'
      EndpointConfiguration:
        Types:
          - REGIONAL
  ApiGwDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: This is the Description of ApiGwDeployment
      RestApiId: !Ref ApiGwRestAPI
    DependsOn:
      - V1Resource
      - CheckResource
      - SlipMegPrmUserResource
      - SlipMegPrmUserMethod


  # ステージ
  ApiGwStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref ApiGwRestAPI
      DeploymentId: !Ref ApiGwDeployment
      StageName: dev
  # オーソライザー
  Authorizer: 
    Type: AWS::ApiGateway::Authorizer
    Properties: 
      ProviderARNs: 
        - !Ref UserPoolArn
      AuthorizerResultTtlInSeconds: "300"
      Type: "COGNITO_USER_POOLS"
      IdentitySource: "method.request.header.Authorization"
      Name: "Authorization"
      RestApiId: !Ref ApiGwRestAPI

  # v1リソース
  V1Resource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiGwRestAPI
        - RootResourceId
      PathPart: v1
      RestApiId: !Ref ApiGwRestAPI

  # Checkリソース
  CheckResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref V1Resource
      PathPart: check
      RestApiId: !Ref ApiGwRestAPI

  # SlipMegPrmUserリソース
  SlipMegPrmUserResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref CheckResource
      PathPart: slipmegprmuser
      RestApiId: !Ref ApiGwRestAPI
  # SlipMegPrmUserメソッド
  SlipMegPrmUserMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref SlipMegPrmUserResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref SlipMegPrmUserCheckLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission1


  # SlipAdminUserCheckリソース
  SlipAdminUserCheckResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref CheckResource
      PathPart: slipadminusercheck
      RestApiId: !Ref ApiGwRestAPI
  # SlipAdminUserCheckメソッド
  SlipAdminUserCheckMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref SlipAdminUserCheckResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref SlipAdminUserCheckLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission2


  # CheckAcceseAdminリソース
  CheckAcceseAdminResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref CheckResource
      PathPart: checkacceseadmin
      RestApiId: !Ref ApiGwRestAPI
  # CheckAcceseAdminメソッド
  CheckAcceseAdminMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref CheckAcceseAdminResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref CheckAcceseAdminLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission3


  # ServiceTransactionReqUserCheckリソース
  ServiceTransactionReqUserCheckResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref CheckResource
      PathPart: checktransactionreq
      RestApiId: !Ref ApiGwRestAPI
  # ServiceTransactionReqUserCheckメソッド
  ServiceTransactionReqUserCheckMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ServiceTransactionReqUserCheckResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref ServiceTransactionReqUserCheckLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission4



  # ServiceTransactionUserCheckリソース
  ServiceTransactionUserCheckResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref CheckResource
      PathPart: checktransaction
      RestApiId: !Ref ApiGwRestAPI
  # ServiceTransactionUserCheckメソッド
  ServiceTransactionUserCheckMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ServiceTransactionUserCheckResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref ServiceTransactionUserCheckLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission5


  # CheckAcceseUserSentTransactionReqリソース
  CheckAcceseUserSentTransactionReqResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref CheckResource
      PathPart: checkacceseusersenttransactionreq
      RestApiId: !Ref ApiGwRestAPI
  # CheckAcceseUserSentTransactionReqメソッド
  CheckAcceseUserSentTransactionReqMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref CheckAcceseUserSentTransactionReqResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref CheckAcceseUserSentTransactionReqLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission6


  # CheckAcceseUserSlipリソース
  CheckAcceseUserSlipResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !Ref CheckResource
      PathPart: checkaccessuserslip
      RestApiId: !Ref ApiGwRestAPI
  # CheckAcceseUserSlipメソッド
  CheckAcceseUserSlipMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      ResourceId: !Ref CheckAcceseUserSlipResource
      RestApiId: !Ref ApiGwRestAPI
      AuthorizerId: !Ref Authorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join 
         - ''
         - - 'arn:aws:apigateway:'
           - !Ref AWS::Region
           - ':lambda:path/2015-03-31/functions/'
           - !Ref CheckAcceseUserSlipLambdaArn
           - '/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: $input.json('$')
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json;charset=UTF-8: $input.json('$')
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json;charset=UTF-8: Empty
    DependsOn: LambdaPermission7


  # LambdaPermission
  LambdaPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: slipMegPrmUserCheckLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: slipAdminUserCheckLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: checkAcceseAdminLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission4:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: serviceTransactionReqUserCheckLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission5:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: serviceTransactionUserCheckLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission6:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: checkAcceseUserSentTransactionReqLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

  LambdaPermission7:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: checkAcceseUserSlipLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com

